# This workflows will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

name: tests

on:
  push:
    branches:
      - main
      - npe2
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches:
      - main
      - npe2
  workflow_dispatch:

defaults:
  run:
    # set as default so all run commands use micromamba shell
    shell: bash -l {0}

jobs:
  test:
    name: ${{ matrix.platform }} py${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu", "macos", "windows"]
        pytest: ["6.2"]
        # 3.9 is not supported because of | for Union syntax
        python: ["3.10"]
        include:
          - os: ubuntu
            environment-file: environment.yml
            # miniforge-variant: Mambaforge-pypy3
            # miniforge-version: 4.9.2-4
          - os: macos
            environment-file: environment.yml
            # miniforge-variant: Mambaforge-pypy3
            # miniforge-version: 4.9.2-4
          - os: windows
            environment-file: environment.yml
            # miniforge-variant: Mambaforge-pypy3
            # miniforge-version: 4.9.2-4
    steps:
      - uses: actions/checkout@v2
      # - name: Cache conda
      #   if: ${{ !env.ACT }}
      #   uses: actions/cache@v2
      #   env:
      #     # Increase this value to reset cache if environment.yml has not changed
      #     CACHE_NUMBER: 0
      #   with:
      #     path: ~/conda_pkgs_dir
      #     key:
      #       ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-${{
      #       hashFiles('environment.yml') }}
      # - uses: conda-incubator/setup-miniconda@v2
      #   with:
      #     condarc-file: ${{ matrix.condarc-file }}
      #     environment-file: ${{ matrix.environment-file }}
      #     miniforge-variant: ${{ matrix.miniforge-variant }}
      #     miniforge-version: ${{ matrix.miniforge-version }}
      #     use-mamba: true
      #     channel-priority: strict
      #     activate-environment: napari-spongepy
      #     use-only-tar-bz2: true # IMPORTANT: This needs to be set for caching to work properly!

      - name: Install Conda environment with Micromamba and cache
        uses: mamba-org/provision-with-micromamba@main
        # Run other step if running locally in act
        if: ${{ !env.ACT }}
        with:
          # Use caching on GitHub Actions
          cache-downloads: true
          cache-env: true
          environment-file: ${{ matrix.environment-file }}
          extra-specs: |
            python=${{ matrix.python }}
            pytest=${{ matrix.pytest }}
      - name: Install Conda environment with Micromamba and no cache
        uses: mamba-org/provision-with-micromamba@main
        # If running locally in act, --reuse already caches, so no caching needed
        if: ${{ env.ACT }}
        with:
          environment-file: ${{ matrix.environment-file }}
          extra-specs: |
            python=${{ matrix.python }}
            pytest=${{ matrix.pytest }}

      # - name: Set up Python ${{ matrix.python-version }}
      #   uses: actions/setup-python@v2
      #   with:
      #     python-version: ${{ matrix.python-version }}

      # these libraries enable testing on Qt on linux
      - uses: tlambert03/setup-qt-libs@v1

      # strategy borrowed from vispy for installing opengl libs on windows
      - name: Install Windows OpenGL
        if: runner.os == 'Windows'
        run: |
          git clone --depth 1 https://github.com/pyvista/gl-ci-helpers.git
          powershell gl-ci-helpers/appveyor/install_opengl.ps1

      # note: if you need dependencies from conda, considering using
      # setup-miniconda: https://github.com/conda-incubator/setup-miniconda
      # and
      # tox-conda: https://github.com/tox-dev/tox-conda
      # - name: Install dependencies
      #   run: |
      #     python -m pip install --upgrade pip
      #     python -m pip install setuptools tox tox-gh-actions

      # this runs the platform-specific tests declared in tox.ini
      # is stuck with no error log (https://github.com/GabrielBB/xvfb-action/issues/23), running without for now
      # - name: Test with tox
      #   uses: GabrielBB/xvfb-action@v1
      #   with:
      #     # we need to manually specify bash here in order to activate the micromamba environment
      #     run: bash -l tox
      #   env:
      #     PLATFORM: ${{ matrix.platform }}
      #     CONDA_EXE: mamba
      # - name: Test with tox
      #   run: tox

      # Install package locally to test it
      - name: Install package
        run: |
          python -m pip install pyqt5 pytest-cov pytest-qt
          python -m pip install .

      # TODO: also run notebooks with --nbmake
      - name: Run pytest directly
        run: pytest

      # - name: Coverage
      #   uses: codecov/codecov-action@v2


  deploy:
    # this will run when you have tagged a commit, starting with "v*"
    # and requires that you have put your twine API key in your
    # github secrets (see readme for details)
    needs: [test]
    runs-on: ubuntu-latest
    if: contains(github.ref, 'tags')
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U setuptools setuptools_scm wheel twine build
      - name: Build and publish
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TWINE_API_KEY }}
        run: |
          git tag
          python -m build .
          twine upload dist/*
